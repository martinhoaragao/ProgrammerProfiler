"Ruleset","Rule","Description","Priority","Group"
"Unused Code","UnusedPrivateField","Detects when a private field is declared and/or assigned a value, but not used","3","S"
"Unused Code","UnusedLocalVariable","Detects when a local variable is declared and/or assigned, but not used","3","S"
"Unused Code","UnusedPrivateMethod","Unused Private Method detects when a private method is declared but is unused","3","S"
"Unused Code","UnusedFormalParameter","Avoid passing parameters to methods or constructors without actually referencing them in the method body","3","S"
"Unused Code","UnusedModifier","Fields in interfaces are automatically public static final, and methods are public abstract.Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static).For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous","3","S"
"Optimization","LocalVariableCouldBeFinal","A local variable assigned only once can be declared final","3","S"
"Optimization","MethodArgumentCouldBeFinal","A method argument that is never re-assigned within the method can be declared final","3","S"
"Optimization","AvoidInstantiatingObjectsInLoops","New objects created within loops should be checked to see if they can created outside them and reused","3","S"
"Optimization","UseArrayListInsteadOfVector","ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required","3","S"
"Optimization","SimplifyStartsWith","Since it passes in a literal of length 1, calls to (string).startsWith can be rewritten using (string).charAt(0) at the expense of some readability","3","R"
"Optimization","UseStringBufferForStringAppends","The use of the '+=' operator for appending strings causes the JVM to create and use an internal StringBuffer.If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.","3","S"
"Optimization","UseArraysAsList","The java.util.Arrays class has a 'asList' method that should be used when you want to create a new List froman array of objects. It is faster than executing a loop to copy all the elements of the array one by one.","3","S"
"Optimization","AvoidArrayLoops","Instead of manually copying data between two arrays, use the efficient System.arraycopy method instead.","3","S"
"Optimization","UnnecessaryWrapperObjectCreation","Most wrapper classes provide static conversion methods that avoid the need to create intermediate objectsjust to create the primitive forms. Using these avoids the cost of creating objects that also need to be garbage-collected later.","3","S"
"Optimization","AddEmptyString","The conversion of literals to strings by concatenating them with empty strings is inefficient.It is much better to use one of the type-specific toString() methods instead.","3","S"
"Optimization","RedundantFieldInitializer","Java will initialize fields with known default values so any explicit initialization of those same defaultsis redundant and results in a larger class file (approximately three additional bytecode instructions per field).","3","S"
"Optimization","PrematureDeclaration","Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception.","3","S"
"Basic","JumbledIncrementer","Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.","3","B"
"Basic","ForLoopShouldBeWhileLoop","Some for loops can be simplified to while loops, this makes them more concise.","3","R"
"Basic","OverrideBothEqualsAndHashcode","Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.","3","S"
"Basic","DoubleCheckedLocking","Partially created objects can be returned by the Double Checked Locking pattern when used in Java.An optimizing JRE may assign a reference to the baz variable before it creates the object thereference is intended to point to.For more details refer to 'http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html' or 'http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html'","1","S"
"Basic","ReturnFromFinallyBlock","Avoid returning from a finally block, this can discard exceptions.","3","S"
"Basic","UnconditionalIfStatement","Do not use 'if' statements whose conditionals are always true or always false.","3","S"
"Basic","BooleanInstantiation","Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.","2","S"
"Basic","CollapsibleIfStatements","Sometimes two consecutive 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.","3","B"
"Basic","ClassCastExceptionWithToArray","When deriving an array of a specific class from your Collection, one should provide an array ofthe same class as the parameter of the toArray() method. Doing otherwise you will will resultin a ClassCastException.","3","S"
"Basic","AvoidDecimalLiteralsInBigDecimalConstructor","One might assume that the result of 'new BigDecimal(0.1)'' is exactly equal to 0.1, but it is actuallyequal to .1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finitelength). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1,appearances notwithstanding.The (String) constructor, on the other hand, is perfectly predictable 'new BigDecimal('0.1')' is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the(String) constructor be used in preference to this one.","3","S"
"Basic","MisplacedNullCheck","The null check here is misplaced. If the variable is null a NullPointerException will be thrown.Either the check is useless (the variable will never be 'null') or it is incorrect.","3","S"
"Basic","AvoidThreadGroup","Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environmentit contains methods that are not thread-safe.","3","S"
"Basic","BrokenNullCheck","The null check is broken since it will throw a NullPointerException itself.It is likely that you used || instead of && or vice versa.","2","S"
"Basic","BigIntegerInstantiation","Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) andfor Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)","3","S"
"Basic","AvoidUsingOctalValues","Integer literals should not start with zero since this denotes that the rest of literal will beinterpreted as an octal value.","3","S"
"Basic","AvoidUsingHardCodedIP","Application with hard-coded IP addresses can become impossible to deploy in some cases.Externalizing IP adresses is preferable.","3","S"
"Basic","CheckResultSet","Always check the return values of navigation methods (next, previous, first, last) of a ResultSet.If the value return is 'false', it should be handled properly.","3","S"
"Basic","AvoidMultipleUnaryOperators","The use of multiple unary operators may be problematic, and/or confusing.Ensure that the intended usage is not a bug, or consider simplifying the expression.","2","B"
"Basic","ExtendsObject","No need to explicitly extend Object.","4","S"
"Basic","CheckSkipResult","The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.","3","S"
"Basic","AvoidBranchingStatementAsLastInLoop","Using a branching statement as the last part of a loop may be a bug, and/or is confusing.Ensure that the usage is not a bug, or consider using another approach.","2","B"
"Basic","DontCallThreadRun","Explicitly calling Thread.run() method will execute in the caller's thread of control. Instead, call Thread.start() for the intended behavior.","4","S"
"Basic","DontUseFloatTypeForLoopIndices","Don't use floating point for loop indices. If you must use floating point, use doubleunless you're certain that float provides enough precision and you have a compellingperformance need (space or time).","3","S"
"Basic","SimplifiedTernary","Look for ternary operators with the form condition ? literalBoolean : fooor condition ? foo : literalBoolean.These expressions can be simplified respectively tocondition || foo when the literalBoolean is true!condition && foo when the literalBoolean is falseor!condition || foo when the literalBoolean is truecondition && foo when the literalBoolean is false","3","S"
"Design","UseUtilityClass","For classes that only have static methods, consider making them utility classes. Note that this doesn't apply to abstract classes, since their subclasses maywell include non-static methods. Also, if you want this class to be a utility class,remember to add a private constructor to prevent instantiation.(Note, that this use was known before PMD 5.1.0 as UseSingleton)","3","S"
"Design","SimplifyBooleanReturns","Avoid unnecessary if-then-else statements when returning a boolean. The result ofthe conditional test can be returned instead.","3","S"
"Design","SimplifyBooleanExpressions","Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.","3","B"
"Design","SwitchStmtsShouldHaveDefault","All switch statements should include a default option to catch any unspecified values.","3","S"
"Design","AvoidDeeplyNestedIfStmts","Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.","3","B"
"Design","AvoidReassigningParameters","Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.","2","B"
"Design","SwitchDensity","A high ratio of statements to labels in a switch statement implies that the switch statement is overloaded. Consider moving the statements into new methods or creating subclasses based on the switch variable.","3","R"
"Design","ConstructorCallsOverridableMethod","Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug.It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super(). If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.","1","S"
"Design","AccessorClassGeneration","Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.","3","S"
"Design","FinalFieldCouldBeStatic","If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.","3","S"
"Design","CloseResource","Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.","3","S"
"Design","NonStaticInitializer","A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.","3","B"
"Design","DefaultLabelNotLastInSwitchStmt","By convention, the default label should be the last label in a switch statement.","3","B"
"Design","NonCaseLabelInSwitchStatement","A non-case label (e.g. a named break/continue label) was present in a switch statement.This legal, but confusing. It is easy to mix up the case labels and the non-case labels.","3","R"
"Design","OptimizableToArrayCall","Calls to a collection's toArray() method should specify target arrays sized to match the size of thecollection. Initial arrays that are too small are discarded in favour of new ones that have to be createdthat are the proper size.","3","S"
"Design","BadComparison","Avoid equality comparisons with Double.NaN. Due to the implicit lack of representationprecision when comparing floating point numbers these are likely to cause logic errors.","3","S"
"Design","EqualsNull","Tests for null should not use the equals() method. The '==' operator should be used instead.","1","S"
"Design","ConfusingTernary","Avoid negation within an 'if' expression with an 'else' clause. For example, rephrase: if (x != y) diff(); else same();as: if (x == y) same(); else diff();Most 'if (x != y)'' cases without an 'else' are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, suchas 'does the error case go first?'' or 'does the common case go first?'.","3","R"
"Design","InstantiationToGetClass","Avoid instantiating an object just to call getClass() on it; use the .class public member instead.","4","S"
"Design","IdempotentOperations","Avoid idempotent operations - they have no effect.","3","B"
"Design","SimpleDateFormatNeedsLocale","Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriateformatting is used.","3","S"
"Design","ImmutableField","Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming immutable ones.","3","B"
"Design","UseLocaleWithCaseConversions","When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages thathave unusual conventions, i.e. Turkish.","3","S"
"Design","AvoidProtectedFieldInFinalClass","Do not use protected fields in final classes since they cannot be subclassed.Clarify your intent by using private or package access modifiers instead.","3","S"
"Design","AssignmentToNonFinalStatic","Identifies a possible unsafe usage of a static field.","3","S"
"Design","MissingStaticMethodInNonInstantiatableClass","A class that has private constructors and does not have any static methods or fields cannot be used.","3","S"
"Design","AvoidSynchronizedAtMethodLevel","Method-level synchronization can cause problems when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.","3","S"
"Design","MissingBreakInSwitch","Switch statements without break or return statements for each case optionmay indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through.","3","S"
"Design","UseNotifyAllInsteadOfNotify","Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then onlyone is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.","3","S"
"Design","AvoidInstanceofChecksInCatchClause","Each caught exception type should be handled in its own catch clause.","3","B"
"Design","AbstractClassWithoutAbstractMethod","The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing theabstract methods. If the class is intended to be used as a base class only (not to be instantiateddirectly) a protected constructor can be provided prevent direct instantiation.","3","B"
"Design","SimplifyConditional","No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.","3","S"
"Design","CompareObjectsWithEquals","Use equals() to compare object references; avoid comparing them with ==.","3","S"
"Design","PositionLiteralsFirstInComparisons","Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.","3","S"
"Design","PositionLiteralsFirstInCaseInsensitiveComparisons","Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.","3","S"
"Design","UnnecessaryLocalBeforeReturn","Avoid the creation of unnecessary local variables","3","S"
"Design","NonThreadSafeSingleton","Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Staticsingletons are usually not needed as only a single instance exists anyway.Other possible fixes are to synchronize the entire method or to use aninitialize-on-demand holder class (do not use the double-check idiom).See Effective Java, item 48.","3","S"
"Design","SingleMethodSingleton","Some classes contain overloaded getInstance. The problem with overloaded getInstance methodsis that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.","2","S"
"Design","SingletonClassReturningNewInstance","Some classes contain overloaded getInstance. The problem with overloaded getInstance methodsis that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.","2","S"
"Design","UncommentedEmptyMethodBody","Uncommented Empty Method Body finds instances where a method body does not containstatements, but there is no comment. By explicitly commenting empty method bodiesit is easier to distinguish between intentional (commented) and unintentionalempty methods.","3","R"
"Design","UncommentedEmptyConstructor","Uncommented Empty Constructor finds instances where a constructor does notcontain statements, but there is no comment. By explicitly commenting emptyconstructors it is easier to distinguish between intentional (commented)and unintentional empty constructors.","3","R"
"Design","AvoidConstantsInterface","An interface should be used only to characterize the external behaviour of an implementing class using an interface as a container of constants is a poor usage pattern and not recommended.","3","S"
"Design","UnsynchronizedStaticDateFormatter","SimpleDateFormat instances are not synchronized. Sun recommends using separate format instancesfor each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.","3","S"
"Design","PreserveStackTrace","Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.","3","S"
"Design","UseCollectionIsEmpty","The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements.Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.","3","S"
"Design","ClassWithOnlyPrivateConstructorsShouldBeFinal","A class with only private constructors should be final, unless the private constructor is invoked by a inner class.","1","S"
"Design","EmptyMethodInAbstractClassShouldBeAbstract","Empty methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.","1","S"
"Design","SingularField","Fields whose scopes are limited to just single methods do not rely on the containing object to provide them to other methods. They may be better implemented as local variableswithin those methods.","3","S"
"Design","ReturnEmptyArrayRatherThanNull","For any method that returns an array, it is a better to return an empty array rather than a null reference. This removes the need for null checking all results and avoids inadvertentNullPointerExceptions.","1","S"
"Design","AbstractClassWithoutAnyMethod","If an abstract class does not provides any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.","1","S"
"Design","TooFewBranchesForASwitchStatement","Switch statements are indended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use theif-then statement to increase code readability.","3","R"
"Design","LogicInversion","Use opposite operator instead of negating the whole expression with a logic complement operator.","3","B"
"Design","UseVarargs","Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.","4","S"
"Design","FieldDeclarationsShouldBeAtStartOfClass","Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.","3","B"
"Design","GodClass","The God Class rule detects the God Class design flaw using metrics. God classes do too many things,are very big and overly complex. They should be split apart to be more object-oriented.The rule uses the detection strategy described in 'Object-Oriented Metrics in Practice'.The violations are reported against the entire class. See also the references:Michele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:Using Software Metrics to Characterize, Evaluate, and Improve the Designof Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.","3","B"
"Design","AvoidProtectedMethodInFinalClassNotExtending","Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whosevisibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.","3","S"
"Code Size","NPathComplexity","The NPath complexity of a method is the number of acyclic execution paths through that method.A threshold of 200 is generally considered the point where measures should be taken to reduce complexity and increase readability.","3","S"
"Code Size","ExcessiveMethodLength","When methods are excessively long this usually indicates that the method is doing more than itsname/signature might suggest. They also become challenging for others to digest since excessive scrolling causes readers to lose focus.Try to reduce the method length by creating helper methods and removing any copy/pasted code.","3","R"
"Code Size","ExcessiveParameterList","Methods with numerous parameters are a challenge to maintain, especially if most of them share thesame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.","3","R"
"Code Size","ExcessiveClassLength","Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methodsapart the code becomes more managable and ripe for reuse.","3","R"
"Code Size","CyclomaticComplexity","Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denotehigh complexity, and 11+ is very high complexity.","3","B"
"Code Size","StdCyclomaticComplexity","Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denotehigh complexity, and 11+ is very high complexity.","3","B"
"Code Size","ModifiedCyclomaticComplexity","Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denotehigh complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a singledecision point.","3","B"
"Code Size","ExcessivePublicCount","Classes with large numbers of public methods and attributes require disproportionate testing effortssince combinational side effects grow rapidly and increase risk. Refactoring these classes intosmaller ones not only increases testability and reliability but also allows new variations to bedeveloped easily.","3","R"
"Code Size","TooManyFields","Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.","3","R"
"Code Size","NcssMethodCount","This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of linesof code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,lines of code that are split are counted as one.","3","R"
"Code Size","NcssTypeCount","This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of linesof code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,lines of code that are split are counted as one.","3","R"
"Code Size","NcssCount","This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual statements.","3","R"
"Code Size","NcssConstructorCount","This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of linesof code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,lines of code that are split are counted as one.","3","R"
"Code Size","TooManyMethods","A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way tohave more fine grained objects.","3","B"
"Controversial","UnnecessaryConstructor","This rule detects when a constructor is not necessary; i.e., when there is only one constructor,its public, has an empty body, and takes no arguments.","3","S"
"Controversial","NullAssignment","Assigning a 'null' to a variable (outside of its declaration) is usually bad form. Sometimes, this typeof assignment is an indication that the programmer doesn't completely understand what is going on in the code. NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.","3","S"
"Controversial","OnlyOneReturn","A method should have only one exit point, and that should be the last statement in the method.","3","B"
"Controversial","AssignmentInOperand","Avoid assignments in operands; this can make code more complicated and harder to read.","3","R"
"Controversial","AtLeastOneConstructor","Each class should declare at least one constructor.","3","S"
"Controversial","DontImportSun","Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.","4","S"
"Controversial","SuspiciousOctalEscape","A suspicious octal escape sequence was found inside a String literal.The Java language specification (section 3.10.6) says an octalescape sequence inside a literal String shall consist of a backslashfollowed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigitAny octal escape sequence followed by non-octal digits can be confusing,e.g. '\038' is interpreted as the octal escape sequence '\03' followed bythe literal character '8'.","3","S"
"Controversial","CallSuperInConstructor","It is a good practice to call super() in a constructor. If super() is not called butanother constructor (such as an overloaded constructor) is called, this rule will not report it.","3","S"
"Controversial","UnnecessaryParentheses","Sometimes expressions are wrapped in unnecessary parentheses, making them look like function calls.","3","R"
"Controversial","DefaultPackage","Use explicit scoping instead of accidental usage of default package private level.The rule allows methods and fields annotated with Guava's @VisibleForTesting.","3","S"
"Controversial","DataflowAnomalyAnalysis","The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.From those informations there can be found various problems.1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error.2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.","5","S"
"Controversial","AvoidFinalLocalVariable","Avoid using final local variables, turn them into fields.","3","S"
"Controversial","AvoidUsingShortType","Java uses the 'short' type to reduce memory usage, not to optimize calculation. In fact, the JVM does not have anyarithmetic capabilities for the short type: the JVM must convert the short into an int, do the proper calculationand convert the int back to a short. Thus any storage gains found through use of the 'short' type may be offset byadverse impacts on performance.","1","S"
"Controversial","AvoidUsingVolatile","Use of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requiresa good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,the volatile keyword should not be used for maintenance purpose and portability.","2","S"
"Controversial","AvoidUsingNativeCode","Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portabilityand increases the maintenance burden.","2","S"
"Controversial","AvoidAccessibilityAlteration","Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(),as the interface PrivilegedAction, allows for the runtime alteration of variable, class, ormethod visibility, even if they are private. This violates the principle of encapsulation.","3","S"
"Controversial","DoNotCallGarbageCollectionExplicitly","Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have thesame behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not.Moreover, 'modern' jvms do a very good job handling garbage collections. If memory usage issues unrelated to memoryleaks develop within an application, it should be dealt with JVM options rather than within the code itself.","2","S"
"Controversial","OneDeclarationPerLine","Java allows the use of several variables declaration of the same type on one line. However, itcan lead to quite messy code. This rule looks for several declarations on the same line.","3","R"
"Controversial","AvoidPrefixingMethodParameters","Prefixing parameters by 'in' or 'out' pollutes the name of the parameters and reduces code readability.To indicate whether or not a parameter will be modify in a method, its better to document methodbehavior with Javadoc.","4","R"
"Controversial","AvoidLiteralsInIfCondition","Avoid using hard-coded literals in conditional statements. By declaring them as static variablesor private members with descriptive names maintainability is enhanced. By default, the literals '-1' and '0' are ignored.More exceptions can be defined with the property 'ignoreMagicNumbers'.","3","B"
"Controversial","UseObjectForClearerAPI","When you write a public method, you should be thinking in terms of an API. If your method is public, it means other classwill use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of informationas a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simplierAPI (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at somepoint to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification toyour API.","3","B"
"Controversial","UseConcurrentHashMap","Since Java5 brought a new implementation of the Map designed for multi-threaded access, you canperform efficient map reads without blocking other threads.","3","S"
"Braces","IfStmtsMustUseBraces","Avoid using if statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code beingcontrolled from the rest.","3","R"
"Braces","WhileLoopsMustUseBraces","Avoid using ‘while’ statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code beingcontrolled from the rest.","3","R"
"Braces","IfElseStmtsMustUseBraces","Avoid using if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.","3","R"
"Braces","ForLoopsMustUseBraces","Avoid using 'for' statements without using curly braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.","3","R"
"Comments","CommentRequired","Denotes whether comments are required (or unwanted) for specific language elements.","3","R"
"Comments","CommentSize","Determines whether the dimensions of non-header comments found are within the specified limits.","3","R"
"Comments","CommentContent","A rule for the politically correct… we don't want to offend anyone.","3","R"
"Comments","CommentDefaultAccessModifier","To avoid mistakes if we want that a Method, Field or Nested class have a default access modifier we must add a comment at the beginning of the Method, Field or Nested class. By default the comment must be /* default */, if you want another, you have to provide a regex.","1","R"
"Empty Code","EmptyCatchBlock","Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.","3","B"
"Empty Code","EmptyIfStmt","Empty If Statement finds instances where a condition is checked but nothing is done about it.","3","B"
"Empty Code","EmptyWhileStmt","Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it isa while loop that does a lot in the exit expression, rewrite it to make it clearer.","3","B"
"Empty Code","EmptyTryBlock","Avoid empty try blocks - what’s the point?","3","B"
"Empty Code","EmptyFinallyBlock","Empty finally blocks serve no purpose and should be removed.","3","B"
"Empty Code","EmptySwitchStatements","Empty switch statements serve no purpose and should be removed.","3","B"
"Empty Code","EmptySynchronizedBlock","Empty synchronized blocks serve no purpose and should be removed.","3","B"
"Empty Code","EmptyStatementNotInLoop","An empty statement (or a semicolon by itself) that is not used as the sole body of a ‘for’ or ‘while’ loop is probably a bug. It could also be a double semicolon, which has no purposeand should be removed.","3","B"
"Empty Code","EmptyInitializer","Empty initializers serve no purpose and should be removed.","3","B"
"Empty Code","EmptyStatementBlock","Empty block statements serve no purpose and should be removed.","3","B"
"Empty Code","EmptyStaticInitializer","An empty static initializer serve no purpose and should be removed.","3","B"
"Unnecessary","UnnecessaryConversionTemporary","Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methodson the wrapper classes instead.","3","S"
"Unnecessary","UnnecessaryReturn","Avoid the use of unnecessary return statements.","3","B"
"Unnecessary","UnnecessaryFinalModifier"," When a class has the final modifier, all the methods are automatically final and do not need to betagged as such.","3","S"
"Unnecessary","UselessOverridingMethod","The overriding method merely calls the same method defined in a superclass.","3","B"
"Unnecessary","UselessOperationOnImmutable","An operation on an Immutable object (String, BigDecimal or BigInteger) won’t change the object itselfsince the result of the operation is a new object. Therefore, ignoring the operation result is an error.","3","S"
"Unnecessary","UnusedNullCheckInEquals","After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object’s equals() method.","3","S"
"Unnecessary","UselessParentheses","Useless parentheses should be removed.","4","R"
"Unnecessary","UselessQualifiedThis","Look for qualified this usages in the same class.","3","S"
